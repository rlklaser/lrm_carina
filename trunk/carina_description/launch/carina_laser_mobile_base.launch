<!-- -->
<launch>
    <param name="use_sim_time" value="true" />

    <!-- send the carina robot XML to param server -->
    <param name="robot_description" textfile="$(find carina_description)/urdf/CarinaTriLaser.urdf"/>

   <!--command="$(find xacro)/xacro.py '$(find carina_description)/urdf/CarinaTriLaser.urdf.xacro'" /-->

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_robot" pkg="gazebo" type="spawn_model"
          args="-param robot_description
                -urdf
                -z 0.01
                -model robot_description"
          respawn="false" output="screen" />

    <!-- start robot state publisher -->
    <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" output="screen" >
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value="" />
    </node>

    <!-- Filter for base laser shadowing/veiling -->
    <node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" name="base_shadow_filter" >
        <remap from="scan" to="base_scan/scan" />
        <remap from="cloud_filtered" to="base_scan/shadow_filtered_old" />
        <param name="target_frame" value="base_footprint" />
        <param name="high_fidelity" value="false" />
        <rosparam command="load" file="$(find carina_description)/params/shadow_filter.yaml" />
    </node>

    <node pkg="point_cloud_converter" type="point_cloud_converter" name="laser_scan_cloud_to_cloud2" >
        <remap from="points_in" to="base_scan/shadow_filtered_old" />
        <remap from="points2_out" to="base_scan/shadow_filtered" />
    </node>

    <!-- Filter for base laser scans that hit the body of the robot -->
    <!--node pkg="robot_self_filter" type="self_filter" name="base_laser_self_filter" respawn="true" output="screen" >
        <remap from="cloud_in" to="base_scan/shadow_filtered" />
        <remap from="cloud_out" to="base_scan/marking" />
        <param name="sensor_frame" type="string" value="base_scan_link" />
        <rosparam file="$(find erratic_description)/params/self_filter.yaml" command="load" />
    </node-->

<!--    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="true" output="screen" >-->
<!--        <param name="odom_frame_id" value="odom"/>-->
<!--    </node>-->
</launch>
